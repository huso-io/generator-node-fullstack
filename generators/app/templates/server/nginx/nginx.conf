user  nginx;

# Sets the worker threads to the number of CPU cores available in the system for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
worker_processes auto;

# Maximum number of open files per worker process.
# Should be > worker_connections.
worker_rlimit_nofile 8192;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  # If you need more connections than this, you start optimizing your OS.
  # That's probably the point at which you hire people who are smarter than you as this is *a lot* of requests.
  # Should be < worker_rlimit_nofile.
  worker_connections 8000;
}


http {
  # Hide nginx version information.
  server_tokens off;

  # Specify MIME types for files.
  include       mime.types;
  default_type  application/octet-stream;

  # Update charset_types to match updated mime.types.
  # text/html is always included by charset module.
  charset_types
    text/css
    text/plain
    text/vnd.wap.wml
    application/javascript
    application/json
    application/rss+xml
    application/xml;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Nginx logs every request that hits the VPS to a log file.
  # If you use analytics to monitor this, you may want to turn this functionality off.
  # Simply edit the access_log directive: access_log off;
  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;

  keepalive_timeout  65;

  fastcgi_buffers 8 16k;
  fastcgi_buffer_size 32k;
  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;

  gzip                 on;
  gzip_comp_level      5;
  gzip_vary            on;
  gzip_min_length      256;
  gzip_proxied         any;
  gzip_disable         "MSIE [1-6]\.";

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/xhtml+xml
    application/xml
    application/font-woff
    application/font-woff2
    application/pdf
    application/manifest+json
    application/x-web-app-manifest+json
    text/cache-manifest
    font/opentype
    image/jpeg
    image/png
    image/bmp
    image/svg+xml
    image/x-icon
    image/webp
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
  # text/html is always compressed by gzip module

  # brotli             on;
  # brotli_comp_level  6;
  # brotli_types       text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  gzip_static on;

  include /etc/nginx/conf.d/*.conf;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  server {
    listen      80;

    server_name
      <%-projectDomain%>;

    return 301  https://$host$request_uri;
  }

  server {
      listen       80;
      server_name
        beta.<%-projectDomain%>;

      location / {
        proxy_pass                 http://127.0.0.1:9888;
        proxy_redirect             off;
        proxy_http_version         1.1;
        proxy_set_header           Upgrade         $http_upgrade;
        proxy_set_header           Connection      $connection_upgrade;
        proxy_set_header           Host            $host;
        proxy_cache_bypass         $http_upgrade;
      }
  }

  server {
    listen                  443 ssl http2;

    ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate         /etc/ssl/cert_chain.crt;
    ssl_certificate_key     /etc/ssl/<%-projectNameEN%>.key;
    # ssl_dhparam           /etc/nginx/dhparam.pem;
    ssl_session_cache       shared:SSL:20m;
    ssl_session_timeout     24h;

    server_name             <%-projectDomain%>;

    location / {
      proxy_pass                 http://127.0.0.1:9888;
      proxy_redirect             off;
      proxy_http_version         1.1;
      proxy_set_header           Upgrade         $http_upgrade;
      proxy_set_header           Connection      $connection_upgrade;
      proxy_set_header           Host            $host;
      proxy_cache_bypass         $http_upgrade;
    }
  }

  server {
    listen                  443 ssl http2;

    ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate         /etc/ssl/cert_chain_api_<%-projectNameEN%>.crt;
    ssl_certificate_key     /etc/ssl/cert_chain_api_<%-projectNameEN%>.key;
    # ssl_dhparam           /etc/nginx/dhparam.pem;
    ssl_session_cache       shared:SSL:20m;
    ssl_session_timeout     24h;

    server_name             api.<%-projectDomain%>;

    location / {
      proxy_pass                 http://127.0.0.1:9011;
      proxy_redirect             off;
      proxy_http_version         1.1;
      proxy_set_header           Upgrade         $http_upgrade;
      proxy_set_header           Connection      $connection_upgrade;
      proxy_set_header           Host            $host;
      proxy_cache_bypass         $http_upgrade;
    }
  }
}
